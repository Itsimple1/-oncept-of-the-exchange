import asyncio
import datetime
import sqlite3
import time
import random

import bot_buyers
import bot_sellers
import config
import api_db

conn = sqlite3.connect('db/db.db')
cur = conn.cursor()


async def init_check_state():
    cur.execute("SELECT * FROM wait_orders WHERE condition=0")
    lines = cur.fetchall()
    time_disaster = str(datetime.datetime.now() + config.disaster_time_sel)[:-7]
    for line in lines:
        await bot_buyers.send_message_to_buyer(line[1],
                                               f'ü§ñ–°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –µ—Å—Ç—å '
                                               f'{config.disaster_time_sel} –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞')
        await bot_sellers.send_message_to_seller(line[5],
                                                 f'ü§ñ–°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –£ –≤–∞—Å –µ—Å—Ç—å {config.disaster_time_sel}'
                                                 f' –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
        cur.execute(f"UPDATE wait_orders SET time = '{time_disaster}' WHERE number={line[0]} and id_buy = {line[1]};")
        conn.commit()
    cur.execute("SELECT * FROM wait_orders WHERE condition=1")
    lines = cur.fetchall()
    time_disaster = str(datetime.datetime.now() + config.disaster_time_buy)[:-7]
    for line in lines:
        await bot_buyers.send_message_to_buyer(line[1],
                                               f'ü§ñ–°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –£ –≤–∞—Å –µ—Å—Ç—å {config.disaster_time_buy}'
                                               f' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
        cur.execute(f"UPDATE wait_orders SET time = '{time_disaster}' WHERE number={line[0]} and id_buy = {line[1]};")
        conn.commit()


async def add_skip_order_seller(id_seller):
    cur.execute(f"SELECT * FROM sellers WHERE id_sel={id_seller}")
    if cur.fetchone() is not None:
        cur.execute(f"UPDATE sellers SET skip_sel=skip_sel+1 WHERE id_sel={id_seller}")
        conn.commit()


async def move_wait_to_order_time(number, id_buyer, link, price, price_buyer, id_seller):
    cur.execute(f"SELECT * FROM wait_orders WHERE number={number} and id_buy={id_buyer}")
    if cur.fetchone()[0]:
        await bot_buyers.send_message_to_buyer(id_buyer,
                                               '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤—ã—à–ª–æ. –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω '
                                               '–≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è')
        await bot_sellers.send_message_to_seller(id_seller,
                                                 '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—à–ª–æ\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º '
                                                 '–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É')
        cur.execute(f"DELETE FROM wait_orders WHERE number={number} and id_buy={id_buyer}")
        cur.execute("INSERT INTO orders_orders VALUES(?, ?, ?, ?, ?);", (number, id_buyer, link, price, price_buyer))
        conn.commit()
        await add_skip_order_seller(id_seller)


async def move_wait_to_history_orders(number, id_buyer):
    cur.execute(f"SELECT * FROM wait_orders WHERE number={number} and id_buy={id_buyer}")
    if cur.fetchone()[0]:
        await bot_buyers.send_message_to_buyer(id_buyer, '–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—à–ª–æ')
        await api_db.sql_bd_buyers.move_wait_to_history(number, id_buyer)


async def check_time_in_wait():
    time_now = str(datetime.datetime.now())[:-7]
    time_now = datetime.datetime.strptime(time_now, "%Y-%m-%d %H:%M:%S")
    cur.execute("SELECT * FROM wait_orders WHERE condition=0")
    result = cur.fetchall()
    if len(result) > 0:
        for i in result:
            time_order = i[8]
            time_order = datetime.datetime.strptime(time_order, "%Y-%m-%d %H:%M:%S")
            if time_now > time_order:
                await move_wait_to_order_time(i[0], i[1], i[2], i[3], i[4], i[5])

    time_now = str(datetime.datetime.now())[:-7]
    time_now = datetime.datetime.strptime(time_now, "%Y-%m-%d %H:%M:%S")
    cur.execute("SELECT * FROM wait_orders WHERE condition=1")
    result = cur.fetchall()
    if len(result) > 0:
        for i in result:
            time_order = i[8]
            time_order = datetime.datetime.strptime(time_order, "%Y-%m-%d %H:%M:%S")
            if time_now > time_order:
                await move_wait_to_history_orders(i[0], i[1])


async def check_complete_order():
    cur.execute("SELECT * FROM complete_orders")
    lines = cur.fetchall()
    for line in lines:
        if line[6] == 'ok':
            await bot_sellers.send_message_to_seller(line[4],
                                                     f"–ó–∞–∫–∞–∑ (–Ω–∞ {line[2]}—Ä—É–±) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                                                     f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {line[5]}—Ä—É–±\n"
                                                     f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ‚ù§")
            code = config.sticker_happy[random.randint(0, config.len_sticker_happy - 1)]
            await bot_sellers.send_sticker_to_seller(line[4], code)
            cur.execute(f"DELETE FROM complete_orders WHERE number={line[0]} and id_buy={line[1]}")
            conn.commit()
    cur.execute("SELECT * FROM solve_problem_orders")
    lines = cur.fetchall()
    for line in lines:
        if line[7] == 'buy':
            await bot_buyers.send_message_to_buyer(line[1],
                                                   f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É (–Ω–∞ —Å—É–º–º—É {line[4]}—Ä—É–±) "
                                                   f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±–º–∞–Ω —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü–∞\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –±—ã–ª–∏ "
                                                   f"–≤–æ–∑–≤–∞—Ä—â–µ–Ω—ã –¥–µ–Ω—å–≥–∏ {line[4]}—Ä—É–±\n–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ "
                                                   f"–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞")
            await bot_sellers.send_message_to_seller(line[5],
                                                     f"–í –∑–∞–∫–∞–∑–µ (–Ω–∞ —Å—É–º–º—É {line[6]}—Ä—É–±) "
                                                     f"–≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä "
                                                     f"–≤—ã–Ω–µ—Å —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. –í–∞–º –≤—ã–Ω–µ—Å–µ–Ω–æ "
                                                     f"–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ "
                                                     f"{config.reiting_ban}, –≤–∞—Å –∑–∞–±–∞–Ω—è—ÇüôÅ")
        elif line[7] == 'sell':
            await bot_buyers.send_message_to_buyer(line[1],
                                                   f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É (–Ω–∞ —Å—É–º–º—É {line[4]}—Ä—É–±) "
                                                   f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ –ª–æ—Ç –±—ã–ª –≤—ã–∫—É–ø–ª–µ–Ω\n–í–∞–º –≤—ã–Ω–µ—Å–µ–Ω–æ "
                                                   f"–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ "
                                                   f"{config.reiting_ban}, –≤–∞—Å –∑–∞–±–∞–Ω—è—ÇüôÅ")
            await bot_sellers.send_message_to_seller(line[5],
                                                     f"–ó–∞–∫–∞–∑ (–Ω–∞ —Å—É–º–º—É{line[3]}—Ä—É–±) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            code = config.sticker_happy[random.randint(0, config.len_sticker_happy - 1)]
            await bot_sellers.send_sticker_to_seller(line[5], code)
        cur.execute(f"DELETE FROM solve_problem_orders WHERE number={line[0]} and id_buy={line[1]}")
        conn.commit()


async def ban_in_real_time():
    cur.execute("SELECT * FROM buyers;")
    for i in cur.fetchall():
        if await api_db.sql_bd_buyers.get_rating_buyer(i[4], i[5], i[6]) <= config.reiting_ban:
            await api_db.sql_bd_buyers.complete_ban_buyer(i[1])
        else:
            await api_db.sql_bd_buyers.unlock_buyer(i[1])
    cur.execute("SELECT * FROM sellers;")
    for i in cur.fetchall():
        if await api_db.sql_bd_sellers.get_reiting_seller(i[4], i[5], i[6], i[7], i[8]) <= config.reiting_ban:
            await api_db.sql_bd_buyers.complete_ban_seller(i[1])
        else:
            await api_db.sql_bd_buyers.unlock_seller(i[1])


async def main():
    await init_check_state()
    while True:
        await check_time_in_wait()
        await check_complete_order()
        await ban_in_real_time()
        time.sleep(config.interval_check)


if __name__ == "__main__":
    asyncio.run(main())
